*****
* console output for test 01
*****

[r4mzy@ARCH42 151018-02-05-d01-hello_world]$ g++ -std=c++11 -o hello_world_error-prone.out hello_world_error-prone.cpp 
hello_world_error-prone.cpp: In function ‘int main()’:
hello_world_error-prone.cpp:7:2: error: ‘cout’ was not declared in this scope
  cout << "Hello, World!\n";
  ^
hello_world_error-prone.cpp:8:19: error: ‘keep_window_open’ was not declared in this scope
  keep_window_open();
                   ^
* can see error is given as "file:line:char" followed by the problematic code element and then followed by the actual line
* in this case, functions I am calling ( cout() and keep_window_open() ) are defined in std_lib_facilities.h which, as far as the compiler was
* concerned, was not included in the source so there's nothing for it to reference how those functions work or what they do...

*****
* console output for test 02
*****

[r4mzy@ARCH42 151018-02-05-d01-hello_world]$ g++ -std=c++11 -o hello_world_error-prone.out hello_world_error-prone.cpp 
hello_world_error-prone.cpp:6:31: fatal error: stdlib_facilities.h: No such file or directory
compilation terminated.

* somewhat expectedly, intentional misspelling of std_lib_facilities.h results in compiler trying to include a file that doesn't exist, and 
* therefor stopping compilation

*****
* console output for test 03 - partial
*****

[r4mzy@ARCH42 151018-02-05-d01-hello_world]$ g++ -std=c++11 -o hello_world_error-prone.out hello_world_error-prone.cpp
hello_world_error-prone.cpp:9:10: warning: missing terminating " character
  cout << "Hello, World!\n;
          ^

* the very first message is the most immediately helpful, clearly pointing out the missing termination of the string
* regardless, compiler continues after this point and seems to devolve into a cascading madness of further errors as it tries to compile something
* it looks like it is trying to pipe everything from the start of the string to EOF to cout
* I included the rest of the (many) messages logged to the console in a separate log file, hello_world_error-prone.log.test03

*****
* console output for test 04
*****

[r4mzy@ARCH42 151018-02-05-d01-hello_world]$ g++ -std=c++11 -o hello_world_error-prone.out hello_world_error-prone.cpp
hello_world_error-prone.cpp:10:1: error: ‘integer’ does not name a type
 integer main() {
 ^

* seems fairly specific, indicating that "integer" isn't an understood function (or function result) type
* in this case we should use "int" which specifies the expected return type of the function (as far as I know) is an integer but c++ requires 
* use of the abbreviated form "int"

*****
* console output for test 05 - partial
*****

[r4mzy@ARCH42 151018-02-05-d01-hello_world]$ g++ -std=c++11 -o hello_world_error-prone.out hello_world_error-prone.cpp
hello_world_error-prone.cpp: In function ‘int main()’:
hello_world_error-prone.cpp:13:7: error: no match for ‘operator<’ (operand types are ‘std::ostream {aka std::basic_ostream<char>}’ and ‘const char [15]’)
  cout < "Hello, World!\n";
       ^
In file included from /usr/include/c++/5.2.0/bits/stl_algobase.h:64:0,
                 from /usr/include/c++/5.2.0/bits/char_traits.h:39,
                 from /usr/include/c++/5.2.0/ios:40,
                 from /usr/include/c++/5.2.0/ostream:38,
                 from /usr/include/c++/5.2.0/iostream:39,
                 from std_lib_facilities.h:28,
                 from hello_world_error-prone.cpp:10:

* large amount of compiler error was logged, see hello_world_error-prone.log.test05 for the whole thing - looks like the compiler really doesn't like
* it when you screw with the expected inputs and outputs
* once again, the first error as above is most useful in immediate debugging with "no match for 'operator<'" making it pretty clear it didn't know
* what the single < symbol was for. it goes on to list the files it checked to see if such an operator was defined in any of them (so I imagine 
* you could define what such an operator symbol might denote...)
